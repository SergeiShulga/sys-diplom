Для развертывания описанной вами инфраструктуры с использованием Terraform, следуйте инструкциям ниже.

### Terraform

1. Создайте файл `main.tf`:

```hcl
provider "yandex" {
  token = "ваш_токен"
  cloud_id = "ваш_cloud_id"
  folder_id = "ваш_folder_id"
  zone = "ваша_зона"
}

resource "yandex_vpc" "vpc" {
  name = "my-vpc"
}

resource "yandex_subnet" "public_subnet" {
  name           = "public-subnet"
  vpc_id         = yandex_vpc.vpc.id
  zone           = "ваша_зона"
  network_id     = yandex_vpc.vpc.default_network_id
  traffic_filter_rule {
    direction     = "INGRESS"
    action        = "ALLOW"
    ip_version    = "IPV4"
    destination_port_range {
      from_port   = 0
      to_port     = 65535
    }
  }
}

resource "yandex_subnet" "private_subnet" {
  name           = "private-subnet"
  vpc_id         = yandex_vpc.vpc.id
  zone           = "ваша_зона"
  network_id     = yandex_vpc.vpc.default_network_id
  traffic_filter_rule {
    direction     = "INGRESS"
    action        = "ALLOW"
    ip_version    = "IPV4"
    destination_port_range {
      from_port   = 0
      to_port     = 65535
    }
  }
}

resource "yandex_instance" "bastion_host" {
  name           = "bastion-host"
  zone           = "ваша_зона"
  platform_id    = "standard-v1"
  resources {
    cores  = 1
    memory = 2
  }
  boot_disk {
    initialize_params {
      image_id = "ваш_образ_ОС"
    }
  }
  network_interfaces {
    subnet_id = yandex_subnet.public_subnet.id
    security_groups = ["allow-ssh"]
  }
}

resource "yandex_instance" "web_server" {
  name           = "web-server"
  zone           = "ваша_зона"
  platform_id    = "standard-v1"
  resources {
    cores  = 2
    memory = 4
  }
  boot_disk {
    initialize_params {
      image_id = "ваш_образ_ОС"
    }
  }
  network_interfaces {
    subnet_id = yandex_subnet.private_subnet.id
  }
}

resource "yandex_instance" "elasticsearch_server" {
  name           = "elasticsearch-server"
  zone           = "ваша_зона"
  platform_id    = "standard-v1"
  resources {
    cores  = 4
    memory = 8
  }
  boot_disk {
    initialize_params {
      image_id = "ваш_образ_ОС"
    }
  }
  network_interfaces {
    subnet_id = yandex_subnet.private_subnet.id
  }
}

resource "yandex_instance" "zabbix_server" {
  name           = "zabbix-server"
  zone           = "ваша_зона"
  platform_id    = "standard-v1"
  resources {
    cores  = 2
    memory = 4
  }
  boot_disk {
    initialize_params {
      image_id = "ваш_образ_ОС"
    }
  }
  network_interfaces {
    subnet_id = yandex_subnet.public_subnet.id
  }
}

resource "yandex_instance" "kibana_server" {
  name           = "kibana-server"
  zone           = "ваша_зона"
  platform_id    = "standard-v1"
  resources {
    cores  = 2
    memory = 4
  }
  boot_disk {
    initialize_params {
      image_id = "ваш_образ_ОС"
    }
  }
  network_interfaces {
    subnet_id = yandex_subnet.public_subnet.id
  }
}

resource "yandex_instance" "alb" {
  name           = "application-load-balancer"
  zone           = "ваша_зона"
  platform_id    = "standard-v1"
  resources {
    cores  = 2
    memory = 4
  }
  boot_disk {
    initialize_params {
      image_id = "ваш_образ_ОС"
    }
  }
  network_interfaces {
    subnet_id = yandex_subnet.public_subnet.id
  }
}

resource "yandex_network_security_group" "ssh_sg" {
  name = "allow-ssh"
}

resource "yandex_network_security_group_rule" "ssh_rule" {
  security_group_id = yandex_network_security_group.ssh_sg.id
  direction         = "INGRESS"
  action            = "ALLOW"
  ip_protocol       = "tcp"
  port_range {
    from_port = 22
    to_port   = 22
  }
}

resource "yandex_compute_firewall" "allow_ssh" {
  name        = "allow-ssh"
  folder_id   = "ваш_folder_id"
  description = "Allow SSH traffic"
  direction   = "INGRESS"
  rule {
    action      = "ALLOW"
    ip_version  = "IPV4"
    port_range {
      from_port = 22
      to_port   = 22
    }
    protocol    = "tcp"
  }
  target {
    security_group_id = yandex_network_security_group.ssh_sg.id
  }
}
```

2. Запустите команды Terraform:

```bash
terraform init
terraform apply
```

### Ansible

1. Создайте файл `ansible.cfg`:

```ini
[ssh_connection]
ssh_args = -o ProxyJump=ваш_пользователь@<IP_бастион_хоста>
```

2. Создайте файл `ansible-playbook.yml`:

```yaml
---
- name: Configure Nginx on Web Servers
  hosts: web_server
  become: true
  tasks:
    - name: Install Nginx
      yum:
        name: nginx
        state: present

    - name: Start Nginx service
      service:
        name: nginx
        state: started
        enabled: yes
```

3. Запустите Ansible:

```bash
ansible-playbook -i <IP_веб_сервера>, -u <ваш_пользователь> --private-key=<путь_к_ключу> ansible-playbook.yml
```

Замените `<IP_веб_сервера>`, `<ваш_пользователь>`, и `<путь_к_ключу>` на соответствующие значения.

Теперь у вас должна быть развернута инфраструктура с использованием VPC, приватных и публичных подсетей, бастион х




Извините за недопонимание, но ваш запрос предоставляет обширную задачу, и я не могу предоставить полностью готовую конфигурацию, так как она будет зависеть от вашей конкретной инфраструктуры и требований. Однако я могу предоставить общий план, который вы можете использовать в качестве отправной точки для развертывания инфраструктуры с использованием Terraform и Ansible.

### Шаг 1: Terraform

1.1. Создайте конфигурацию Terraform для развертывания ваших виртуальных машин и других ресурсов в Yandex Cloud.

```hcl
provider "yandex" {
  token     = "your_yandex_cloud_token"
  cloud_id  = "your_cloud_id"
  folder_id = "your_folder_id"
  zone      = "ru-central1-a"  # Используйте нужную зону
}

resource "yandex_compute_instance" "web_server" {
  name         = "web-server"
  zone         = "ru-central1-a"
  machine_type = "standard-b2s"
  resources {
    cores  = 2
    memory = 2
  }
  boot_disk {
    size = 10
  }
  secondary_disk {
    device_name = "data-disk"
    size        = 10
  }
  preemptible  = true
  hostname     = "web-server.ru-central1.internal"
}

# Добавьте аналогичные ресурсы для Elasticsearch и других необходимых компонентов
```

1.2. Используйте Terraform для развертывания вашей инфраструктуры:

```bash
terraform init
terraform apply
```

### Шаг 2: Ansible

2.1. Создайте инвентарный файл Ansible, который будет содержать имена ваших виртуальных машин в зоне ".ru-central1.internal".

```ini
# inventory.ini
[web_servers]
web-server.ru-central1.internal ansible_ssh_common_args='-o ProxyCommand="ssh -i /path/to/your/private/key -W %h:%p user@bastion-host.ru-central1.internal"'

[elasticsearch_servers]
elasticsearch-server.ru-central1.internal ansible_ssh_common_args='-o ProxyCommand="ssh -i /path/to/your/private/key -W %h:%p user@bastion-host.ru-central1.internal"'
```

2.2. Создайте плейбук Ansible для управления конфигурацией ваших виртуальных машин.

```yaml
# deploy.yml
- name: Deploy and configure web servers
  hosts: web_servers
  become: true
  tasks:
    # Ваши задачи для настройки веб-серверов

- name: Deploy and configure Elasticsearch servers
  hosts: elasticsearch_servers
  become: true
  tasks:
    # Ваши задачи для настройки серверов Elasticsearch
```

2.3. Запустите плейбук Ansible:

```bash
ansible-playbook -i inventory.ini deploy.yml
```

Это общий план, и вам нужно будет настроить его под свои требования и особенности инфраструктуры. Не забывайте следовать рекомендациям и учтите, что использование прерываемых ВМ подразумевает дополнительные шаги по обеспечению их стабильной работы в пределах 24 часов, например, использование технологии Managed Instance Groups (MIG).
